generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  refreshTokens RefreshToken[]
  idempotencyKeys IdempotencyKey[]
}

model Order {
  id               String       @id
  userId           String
  user             User         @relation(fields: [userId], references: [id])
  symbol           String
  sequence         BigInt       @db.BigInt
  side             OrderSide
  type             OrderType
  price            Float
  quantity         Float
  filledQuantity   Float        @default(0)
  remainingQuantity Float       @default(0)
  status           OrderStatus  @default(open)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  makerTrades      Trade[]      @relation("Maker")
  takerTrades      Trade[]      @relation("Taker")

  @@index([symbol, status])
  @@unique([symbol, sequence])
}

model Trade {
  id            String   @id @default(uuid())
  takerOrderId  String
  makerOrderId  String
  symbol        String
  price         Float
  quantity      Float
  executedAt    DateTime @default(now())
  takerOrder    Order    @relation("Taker", fields: [takerOrderId], references: [id])
  makerOrder    Order    @relation("Maker", fields: [makerOrderId], references: [id])

  @@index([symbol, executedAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  jti       String   @unique
  tokenHash String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}

model IdempotencyKey {
  key       String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bodyHash  String
  commandId String
  createdAt DateTime @default(now())
  @@index([userId])
}

model EventOutbox {
  id          String   @id @default(uuid())
  eventType   String
  payload     Json
  producedAt  DateTime @default(now())
  publishedAt DateTime?
  attempts    Int      @default(0)
  error       String?
  orderSymbol String?
  orderSequence BigInt? @db.BigInt

  @@index([publishedAt])
  @@index([eventType])
  @@index([orderSymbol, orderSequence])
}

enum OrderSide {
  buy
  sell
}

enum OrderType {
  limit
  market
}

enum OrderStatus {
  open
  partial
  filled
  cancelled
  rejected
}
